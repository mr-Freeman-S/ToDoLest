{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/appReducer.ts","features/TodolistsList/tasks-reducer.ts","utils/ErrorUtils.ts","features/Login/auth-reducer.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Footer/Copyright.tsx","features/Login/Login.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","authAPI","get","data","post","delete","todolistsAPI","title","id","put","todolistId","taskId","model","ResultCodeStatuses","initialState","status","error","setAppStatusAC","type","setErrorAC","handleServerNetworkError","dispatch","message","handleServerAppError","messages","length","setLoadingTaskAC","isLoading","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","action","updateTaskAC","catch","err","console","warn","setEntityStatus","entityStatus","isLogin","setLogged","rootReducer","combineReducers","state","filter","todoListId","map","el","todolist","copyState","todolists","forEach","tl","app","auth","store","createStore","applyMiddleware","thunkMiddleware","useAppSelector","useSelector","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Copyright","Typography","color","align","Link","href","Date","getFullYear","theme","createTheme","Login","navigate","useNavigate","SignInSchema","Yup","shape","password","min","max","required","email","formik","useFormik","initialValues","rememberMe","validationSchema","onSubmit","values","resultCode","success","redirect","useEffect","ThemeProvider","Container","component","maxWidth","CssBaseline","Box","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","FormLabel","target","rel","handleSubmit","noValidate","mt","TextField","margin","fullWidth","label","name","autoComplete","autoFocus","onChange","handleChange","value","touched","Boolean","errors","helperText","FormControlLabel","control","Checkbox","Button","mb","AddItemForm","memo","log","useState","setTitle","setError","addItem","trim","e","currentTarget","onKeyPress","charCode","disabled","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Delete","Todolist","thunk","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","TodolistsList","removeTaskAC","removeTaskTC","item","addTaskAC","addTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","App","AppBar","position","Toolbar","edge","Menu","LinearProgress","fixed","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88b3e702.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'ec652bb1-c156-401f-98be-6b13952be4d4'\n    }\n})\n\n// api\nexport type loginParamsType = {\n    email: string, password: string, rememberMe: boolean\n}\nexport const authAPI = {\n    authMe() {\n        return instance.get<ResponseType<{\n            id: number\n            email: string\n            login: string\n        }>>('/auth/me')\n    },\n    loginMe(data: loginParamsType) {\n        return instance.post<loginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('/auth/login', data)\n    },\n    logout() {\n        return instance.delete<ResponseType>('/auth/login')\n    }\n}\nexport const todolistsAPI = {\n    getTodolists() {\n        return instance.get<TodolistType[]>('todo-lists');\n    },\n    createTodolist(title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\n    },\n    deleteTodolist(id: string) {\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\n    },\n    updateTodolist(id: string, title: string) {\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n}\n\n// types\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n    isLoading: boolean\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nconst initialState = {\n    status: 'idle' as RequestStatusType,\n    error: null as string | null\n}\n\ntype InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case \"APP/SET-ERROR\":\n            return {...state, error: action.error}\n        default:\n            return state\n    }\n}\n\nexport const setAppStatusAC = (status: RequestStatusType) => {\n    return {type: 'APP/SET-STATUS', status} as const\n}\nexport type setAppStatusType = ReturnType<typeof setAppStatusAC>\n\nexport const setErrorAC = (error: string | null) => {\n    return {type: 'APP/SET-ERROR', error} as const\n}\nexport type setErrorACType = ReturnType<typeof setErrorAC>\n\nexport type AppActionsType =\n    | setAppStatusType\n    | setErrorACType\n\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\nimport {Dispatch} from 'redux'\nimport {AppRootStateType} from '../../app/store'\nimport {setAppStatusAC, setAppStatusType, setErrorACType} from \"../../app/appReducer\";\nimport {AxiosError} from \"axios\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/ErrorUtils\";\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK':\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\n        case 'ADD-TASK':\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        case 'UPDATE-TASK':\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            }\n        case \"SET-LOADING\":\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map((el) => el.id === action.taskId ? {...el, isLoading: action.isLoading} : el)\n            }\n        case 'ADD-TODOLIST':\n            return {...state, [action.todolist.id]: []}\n        case 'REMOVE-TODOLIST':\n            const copyState = {...state}\n            delete copyState[action.id]\n            return copyState\n        case 'SET-TODOLISTS': {\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = []\n            })\n            return copyState\n        }\n        case 'SET-TASKS':\n            return {...state, [action.todolistId]: action.tasks}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\nexport const addTaskAC = (task: TaskType) =>\n    ({type: 'ADD-TASK', task} as const)\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\nexport const setLoadingTaskAC = (todolistId: string, taskId: string, isLoading: boolean) =>\n    ({type: 'SET-LOADING', taskId, todolistId, isLoading} as const)\n\nenum ResultCodeStatuses {\n    'success' = 0,\n    'error' = 1,\n    'captcha' = 10\n}\n\n// thunks\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC(\"loading\"))\n\n    todolistsAPI.getTasks(todolistId)\n        .then((res) => {\n            const tasks = res.data.items\n            const action = setTasksAC(tasks, todolistId)\n            dispatch(action)\n            dispatch(setAppStatusAC(\"succeeded\"))\n        })\n        .catch((err: AxiosError) => handleServerNetworkError(dispatch, err.message))\n}\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setLoadingTaskAC(todolistId, taskId, true))\n\n    todolistsAPI.deleteTask(todolistId, taskId)\n        .then(res => {\n            if (res.data.resultCode === ResultCodeStatuses.success) {\n                const action = removeTaskAC(taskId, todolistId)\n                dispatch(action)\n                dispatch(setLoadingTaskAC(todolistId, taskId, false))\n\n            } else {\n                handleServerAppError<{}>(res.data, dispatch)\n                dispatch(setLoadingTaskAC(todolistId, taskId, false))\n\n            }\n        })\n        .catch((err: AxiosError) => {\n                handleServerNetworkError(dispatch, err.message)\n            }\n        )\n\n}\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC(\"loading\"))\n    todolistsAPI.createTask(todolistId, title)\n        .then(res => {\n            if (res.data.resultCode === ResultCodeStatuses.success) {\n                const task = res.data.data.item\n                dispatch(addTaskAC(task))\n                dispatch(setAppStatusAC(\"succeeded\"))\n            } else {\n                handleServerAppError<{ item: TaskType }>(res.data, dispatch)\n            }\n        })\n        .catch((err: AxiosError) => {\n                handleServerNetworkError(dispatch, err.message)\n            }\n        )\n\n}\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\n        const state = getState()\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            //throw new Error(\"task not found in the state\");\n            console.warn('task not found in the state')\n            return\n        }\n\n        const apiModel: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            title: task.title,\n            status: task.status,\n            ...domainModel\n        }\n\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\n            .then(res => {\n                const action = updateTaskAC(taskId, domainModel, todolistId)\n                dispatch(action)\n            })\n            .catch((err: AxiosError) => handleServerNetworkError(dispatch, err.message))\n    }\n\n// types\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\ntype ActionsType =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n    | SetTodolistsActionType\n    | ReturnType<typeof setTasksAC>\n    | setAppStatusType\n    | setErrorACType\n    | ReturnType<typeof setLoadingTaskAC>\n","import {Dispatch} from \"redux\";\nimport {AppActionsType, setAppStatusAC, setErrorAC} from \"../app/appReducer\";\nimport {ResponseType} from \"../api/todolists-api\";\n\n\nexport const handleServerNetworkError = (dispatch: Dispatch<AppActionsType>, message: string) => {\n    dispatch(setAppStatusAC(\"failed\"))\n    dispatch(setErrorAC(message))\n}\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch<AppActionsType>) => {\n    if (data.messages.length) {\n        dispatch(setErrorAC(data.messages[0]))\n    } else {\n        dispatch(setErrorAC('Some error occurred'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\n","import {Dispatch} from \"redux\";\nimport {setAppStatusAC, setAppStatusType} from \"../../app/appReducer\";\nimport {authAPI, loginParamsType} from \"../../api/todolists-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/ErrorUtils\";\nimport {AxiosError} from \"axios\";\nimport {redirect} from \"react-router-dom\";\n\n\nconst initialState: authStateType = {\n    isLogin: false\n}\n\nexport const authReducer = (state: authStateType = initialState, action: ActionsType) => {\n    switch (action.type) {\n        case 'auth/setLogged':\n            return {...state, isLogin: action.isLogin}\n        case 'auth/setLogout':\n            return {...state, isLogin: false}\n\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setLogged = (isLogin: boolean) =>\n    ({type: 'auth/setLogged', isLogin} as const)\nexport const setLogout = () =>\n    ({type: 'auth/setLogout'} as const)\n\nenum ResultCodeStatuses {\n    'success' = 0,\n    'error' = 1,\n    'captcha' = 10\n}\n\n// thunks\nexport const authMeTC = () => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC(\"loading\"))\n    authAPI.authMe()\n        .then((res) => {\n            if (res.data.resultCode === ResultCodeStatuses.success) {\n                dispatch(setLogged(true))\n                dispatch(setAppStatusAC(\"succeeded\"))\n                redirect('/')\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err: AxiosError) => {\n                handleServerNetworkError(dispatch, err.message)\n            }\n        )\n}\n\nexport const loginMeTC = (data: loginParamsType) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC(\"loading\"))\n    authAPI.loginMe(data)\n        .then((res) => {\n            if (res.data.resultCode === ResultCodeStatuses.success) {\n                dispatch(setLogged(true))\n                dispatch(setAppStatusAC(\"succeeded\"))\n                redirect('/')\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err: AxiosError) => {\n                handleServerNetworkError(dispatch, err.message)\n            }\n        )\n}\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC(\"loading\"))\n    authAPI.logout()\n        .then((res) => {\n            if (res.data.resultCode === ResultCodeStatuses.success) {\n                dispatch(setLogout())\n                dispatch(setAppStatusAC(\"succeeded\"))\n                redirect('/login')\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((err: AxiosError) => {\n                handleServerNetworkError(dispatch, err.message)\n            }\n        )\n}\n\n\n// types\ntype authStateType = {\n    isLogin: boolean\n}\n\ntype ActionsType =\n    ReturnType<typeof setLogged>\n    | ReturnType<typeof setLogout>\n    | setAppStatusType","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\nimport {Dispatch} from 'redux'\nimport {RequestStatusType, setAppStatusAC, setAppStatusType, setErrorAC, setErrorACType} from \"../../app/appReducer\";\nimport {AxiosError} from \"axios\";\nimport {handleServerNetworkError} from \"../../utils/ErrorUtils\";\n\nconst initialState: Array<TodolistDomainType> = []\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST':\n            return state.filter(tl => tl.id !== action.id)\n        case 'ADD-TODOLIST':\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\n        case 'CHANGE-TODOLIST-TITLE':\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\n        case 'CHANGE-TODOLIST-FILTER':\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\n        case 'SET-TODOLISTS':\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\n        case 'SET-ENTITY-STATUS':\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\n        default:\n            return state\n    }\n}\n\n// actions\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\n    type: 'CHANGE-TODOLIST-TITLE',\n    id,\n    title\n} as const)\nexport const setEntityStatus = (id: string, entityStatus: RequestStatusType) => {\n    return {type: 'SET-ENTITY-STATUS', id, entityStatus} as const\n}\n\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\n    type: 'CHANGE-TODOLIST-FILTER',\n    id,\n    filter\n} as const)\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\n\n// thunks\nexport const fetchTodolistsTC = () => {\n    return (dispatch: Dispatch<ActionsType>) => {\n        dispatch(setAppStatusAC(\"loading\"))\n        todolistsAPI.getTodolists()\n            .then((res) => {\n                dispatch(setTodolistsAC(res.data))\n                dispatch(setAppStatusAC(\"succeeded\"))\n            })\n            .catch((err: AxiosError) => handleServerNetworkError(dispatch, err.message))\n    }\n}\nexport const removeTodolistTC = (todolistId: string) => {\n\n    return (dispatch: Dispatch<ActionsType>) => {\n        dispatch(setEntityStatus(todolistId, 'loading'))\n        todolistsAPI.deleteTodolist(todolistId)\n            .then((res) => {\n                dispatch(removeTodolistAC(todolistId))\n                dispatch(setEntityStatus(todolistId, 'succeeded'))\n            })\n            .catch((err: AxiosError) => {\n                handleServerNetworkError(dispatch, err.message)\n                dispatch(setEntityStatus(todolistId, \"failed\"))\n            })\n    }\n}\nexport const addTodolistTC = (title: string) => {\n    return (dispatch: Dispatch<ActionsType>) => {\n        dispatch(setAppStatusAC(\"loading\"))\n        todolistsAPI.createTodolist(title)\n            .then((res) => {\n                if (res.data.resultCode === 0) {\n                    dispatch(addTodolistAC(res.data.data.item))\n                    dispatch(setAppStatusAC(\"succeeded\"))\n                } else {\n                    dispatch(setAppStatusAC(\"failed\"))\n                    dispatch(setErrorAC(res.data.messages[0]))\n                }\n\n            })\n            .catch((err: AxiosError) => handleServerNetworkError(dispatch, err.message))\n    }\n}\nexport const changeTodolistTitleTC = (id: string, title: string) => {\n    return (dispatch: Dispatch<ActionsType>) => {\n        dispatch(setAppStatusAC(\"loading\"))\n        todolistsAPI.updateTodolist(id, title)\n            .then((res) => {\n                dispatch(setAppStatusAC(\"succeeded\"))\n                dispatch(changeTodolistTitleAC(id, title))\n            })\n            .catch((err: AxiosError) => handleServerNetworkError(dispatch, err.message))\n    }\n}\n\n// types\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\nexport type setEntityStatusType = ReturnType<typeof setEntityStatus>;\ntype ActionsType =\n    | RemoveTodolistActionType\n    | AddTodolistActionType\n    | ReturnType<typeof changeTodolistTitleAC>\n    | ReturnType<typeof changeTodolistFilterAC>\n    | SetTodolistsActionType\n    | setAppStatusType\n    | setErrorACType\n    | setEntityStatusType\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {appReducer} from './appReducer';\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\nimport {authReducer} from \"../features/Login/auth-reducer\";\n\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer\n})\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector","import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\nimport {useAppSelector} from \"../../app/store\";\nimport {useDispatch} from \"react-redux\";\nimport {setErrorAC} from \"../../app/appReducer\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport const ErrorSnackbar = () => {\n    const error = useAppSelector<string | null>(state => state.app.error)\n    const dispatch = useDispatch()\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setErrorAC(null));\n    };\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","import Typography from \"@mui/material/Typography\";\nimport Link from \"@mui/material/Link\";\nimport * as React from \"react\";\n\nexport function Copyright(props:any) {\n    return (\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"\">\n                Todo-app\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}","import * as React from 'react';\nimport {useEffect} from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Checkbox from '@mui/material/Checkbox';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport {createTheme, ThemeProvider} from '@mui/material/styles';\nimport {useFormik} from \"formik\";\nimport {Copyright} from \"../Footer/Copyright\";\nimport * as Yup from \"yup\"\nimport {useDispatch} from \"react-redux\";\nimport {loginMeTC} from \"./auth-reducer\";\nimport {useAppSelector} from \"../../app/store\";\nimport {useNavigate} from \"react-router-dom\";\nimport {FormLabel} from \"@mui/material\";\n\ntype initialStateTypeFormik = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: boolean\n}\n\nconst theme = createTheme();\n\nexport const Login: React.FC = () => {\n    const dispatch = useDispatch()\n    const isLogin = useAppSelector(state => state.auth.isLogin)\n    const navigate = useNavigate()\n\n    const SignInSchema = Yup.object().shape({\n        password: Yup.string()\n            .min(4, 'Too Short!')\n            .max(50, 'Too Long!')\n            .required('Required'),\n        email: Yup.string().email('Invalid email').required('Required'),\n    });\n\n    const formik = useFormik<initialStateTypeFormik>({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false,\n        }, validationSchema: SignInSchema,\n        onSubmit: values => {\n            dispatch(loginMeTC(values))\n        },\n    });\n\n    useEffect(() => {\n        if (isLogin) {\n            return navigate('/')\n        }\n    }, [isLogin, navigate])\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Container component=\"main\" maxWidth=\"xs\">\n                <CssBaseline/>\n                <Box\n                    sx={{\n                        marginTop: 8,\n                        display: 'flex',\n                        flexDirection: 'column',\n                        alignItems: 'center',\n                    }}\n                >\n                    <Avatar sx={{m: 1, bgcolor: 'secondary.main'}}>\n                        <LockOutlinedIcon/>\n                    </Avatar>\n                    <Typography component=\"h1\" variant=\"h5\">\n                        Sign in\n                    </Typography>\n                    <FormLabel>\n                        <p>\n                            To log in get registered <a href={\"https://social-network.samuraijs.com/\"}\n                                                        target={\"_blank\"} rel={\"noreferrer\"}> here</a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <Box component=\"form\" onSubmit={formik.handleSubmit} noValidate sx={{mt: 1}}>\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            id=\"email\"\n                            label=\"Email Address\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            autoFocus\n                            onChange={formik.handleChange}\n                            value={formik.values.email}\n                            error={formik.touched.email && Boolean(formik.errors.email)}\n                            helperText={formik.touched.email && formik.errors.email}\n\n                        />\n                        <TextField\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            name=\"password\"\n                            label=\"Password\"\n                            type=\"password\"\n                            id=\"password\"\n                            autoComplete=\"current-password\"\n                            onChange={formik.handleChange}\n                            value={formik.values.password}\n                            error={formik.touched.password && Boolean(formik.errors.password)}\n                            helperText={formik.touched.password && formik.errors.password}\n                        />\n                        <FormControlLabel\n                            control={<Checkbox onChange={formik.handleChange}\n                                               value={formik.values.rememberMe} color=\"primary\"/>}\n                            label=\"Remember me\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            sx={{mt: 3, mb: 2}}\n                        >\n                            Sign In\n                        </Button>\n                    </Box>\n                </Box>\n                <Copyright sx={{mt: 8, mb: 4}}/>\n            </Container>\n        </ThemeProvider>\n    );\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport TextField from '@mui/material/TextField';\nimport IconButton from '@mui/material/IconButton';\nimport {AddBox} from '@mui/icons-material';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\n    console.log('AddItemForm called')\n\n    let [title, setTitle] = useState('')\n    let [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        if (title.trim() !== '') {\n            props.addItem(title);\n            setTitle('');\n        } else {\n            setError('Title is required');\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItem();\n        }\n    }\n\n    return <div>\n        <TextField variant=\"outlined\"\n                   error={!!error}\n                   value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   label=\"Title\"\n                   helperText={error}\n                   disabled={props.disabled}\n        />\n        <IconButton color=\"primary\" onClick={addItem}>\n            <AddBox/>\n        </IconButton>\n    </div>\n})\n","import React, {ChangeEvent, useState} from 'react';\nimport TextField from '@mui/material/TextField';\n\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\n    console.log('EditableSpan called');\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n});\n","import React, {ChangeEvent, useCallback} from 'react'\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\nimport {Delete} from '@mui/icons-material';\nimport IconButton from '@mui/material/IconButton';\nimport Checkbox from '@mui/material/Checkbox';\n\ntype TaskPropsType = {\n    task: TaskType\n    todolistId: string\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\n    }, [props.task.id, props.todolistId]);\n\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\n    }, [props.task.id, props.todolistId]);\n\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\n        <Checkbox\n            checked={props.task.status === TaskStatuses.Completed}\n            color=\"primary\"\n            onChange={onChangeHandler}\n        />\n\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\n        <IconButton onClick={onClickHandler} disabled={props.task.isLoading}>\n            <Delete/>\n        </IconButton>\n    </div>\n})\n","import React, {useCallback, useEffect} from 'react'\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\nimport {Task} from './Task/Task'\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\nimport {FilterValuesType} from '../todolists-reducer'\nimport {useDispatch} from 'react-redux'\nimport {fetchTasksTC} from '../tasks-reducer'\n\nimport IconButton from '@mui/material/IconButton';\nimport Button from '@mui/material/Button';\nimport {Delete} from '@mui/icons-material';\nimport {RequestStatusType} from \"../../../app/appReducer\";\n\ntype PropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n\n}\n\nexport const Todolist = React.memo(function (props: PropsType) {\n    console.log('Todolist called')\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        const thunk = fetchTasksTC(props.id)\n        dispatch(thunk)\n    }, [dispatch, props.id])\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.id)\n    }, [props.addTask, props.id])\n\n    const removeTodolist = () => {\n        props.removeTodolist(props.id)\n    }\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodolistTitle(props.id, title)\n    }, [props.id, props.changeTodolistTitle])\n\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\n\n\n    let tasksForTodolist = props.tasks\n\n    if (props.filter === 'active') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.filter === 'completed') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    return <div>\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus === \"loading\"}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === \"loading\"}/>\n        <div>\n            {\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\n                                                removeTask={props.removeTask}\n                                                changeTaskTitle={props.changeTaskTitle}\n                                                changeTaskStatus={props.changeTaskStatus}\n                />)\n            }\n        </div>\n        <div style={{paddingTop: '10px'}}>\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\n                    onClick={onAllClickHandler}\n                    color={'inherit'}\n            >All\n            </Button>\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\n                    onClick={onActiveClickHandler}\n                    color={'primary'}>Active\n            </Button>\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\n                    onClick={onCompletedClickHandler}\n                    color={'secondary'}>Completed\n            </Button>\n        </div>\n    </div>\n})\n\n\n","import React, {useCallback, useEffect} from 'react'\nimport {useDispatch} from 'react-redux'\nimport {useAppSelector} from '../../app/store'\nimport {\n    addTodolistTC,\n    changeTodolistFilterAC,\n    changeTodolistTitleTC,\n    fetchTodolistsTC,\n    FilterValuesType,\n    removeTodolistTC,\n    TodolistDomainType\n} from './todolists-reducer'\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\nimport {TaskStatuses} from '../../api/todolists-api'\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\nimport {Todolist} from './Todolist/Todolist'\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport {useNavigate} from \"react-router-dom\";\n\nexport const TodolistsList: React.FC = () => {\n\n    const todolists = useAppSelector<Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useAppSelector<TasksStateType>(state => state.tasks)\n    const isLogin = useAppSelector<boolean>(state => state.auth.isLogin)\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        const thunk = fetchTodolistsTC()\n        dispatch(thunk)\n    }, [dispatch])\n\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        const thunk = removeTaskTC(id, todolistId)\n        dispatch(thunk)\n    }, [dispatch])\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        const thunk = addTaskTC(title, todolistId)\n        dispatch(thunk)\n    }, [dispatch])\n\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\n        const thunk = updateTaskTC(id, {status}, todolistId)\n        dispatch(thunk)\n    }, [dispatch])\n\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\n        dispatch(thunk)\n    }, [dispatch])\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC(todolistId, value)\n        dispatch(action)\n    }, [dispatch])\n\n    const removeTodolist = useCallback(function (id: string) {\n        const thunk = removeTodolistTC(id)\n        dispatch(thunk)\n    }, [dispatch])\n\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\n        const thunk = changeTodolistTitleTC(id, title)\n        dispatch(thunk)\n    }, [dispatch])\n\n    const addTodolist = useCallback((title: string) => {\n        const thunk = addTodolistTC(title)\n        dispatch(thunk)\n    }, [dispatch])\n\n    useEffect(() => {\n        if (!isLogin) {\n            navigate('/login')\n        }\n    }, [isLogin, navigate])\n    return <>\n        <Grid container style={{padding: '20px'}}>\n            <AddItemForm addItem={addTodolist}/>\n        </Grid>\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    let allTodolistTasks = tasks[tl.id]\n\n                    return <Grid item key={tl.id}>\n                        <Paper style={{padding: '10px'}}>\n                            <Todolist\n                                id={tl.id}\n                                title={tl.title}\n                                tasks={allTodolistTasks}\n                                entityStatus={tl.entityStatus}\n                                removeTask={removeTask}\n                                changeFilter={changeFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeStatus}\n                                filter={tl.filter}\n                                removeTodolist={removeTodolist}\n                                changeTaskTitle={changeTaskTitle}\n                                changeTodolistTitle={changeTodolistTitle}\n                            />\n                        </Paper>\n                    </Grid>\n                })\n            }\n        </Grid>\n    </>\n}\n","import React, {useEffect} from 'react'\nimport './App.css'\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport {Menu} from '@mui/icons-material';\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport {useAppSelector} from \"./store\";\nimport {RequestStatusType} from \"./appReducer\";\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\nimport {Route, Routes} from \"react-router-dom\";\nimport {Login} from \"../features/Login/Login\";\nimport {useDispatch} from \"react-redux\";\nimport {authMeTC, logoutTC} from \"../features/Login/auth-reducer\";\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList';\n\n\nconst App = () => {\n\n    const status = useAppSelector<RequestStatusType>(state => state.app.status)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(authMeTC())\n    }, [dispatch])\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    <Button onClick={() => {\n                        dispatch(logoutTC())\n                    }} color=\"inherit\">logout</Button>\n                </Toolbar>\n            </AppBar>\n            {(status === 'loading') && <LinearProgress color=\"secondary\"/>}\n\n            <Container fixed>\n                <Routes>\n                    < Route path=\"/login\" element={<Login/>}/>\n                    <Route path=\"/\" element={<TodolistsList/>}/>\n                </Routes>\n\n            </Container>\n            <ErrorSnackbar/>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}